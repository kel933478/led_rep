#!/bin/bash
# Script de diagnostic des probl√®mes de d√©ploiement
# Aide √† identifier pourquoi le d√©ploiement ne fonctionne pas

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç DIAGNOSTIC PROBL√àMES DE D√âPLOIEMENT${NC}"
echo "========================================"

# Fonction de test
check_command() {
    if command -v $1 &> /dev/null; then
        echo -e "${GREEN}‚úÖ $1 install√©${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 manquant${NC}"
        return 1
    fi
}

check_service() {
    if systemctl is-active --quiet $1; then
        echo -e "${GREEN}‚úÖ $1 actif${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 inactif${NC}"
        return 1
    fi
}

echo ""
echo -e "${YELLOW}üìã V√©rification Syst√®me${NC}"
echo "----------------------"

# V√©rification OS
echo -n "OS: "
if [ -f /etc/os-release ]; then
    . /etc/os-release
    echo -e "${BLUE}$NAME $VERSION${NC}"
else
    echo -e "${RED}OS non identifi√©${NC}"
fi

# V√©rification utilisateur
echo -n "Utilisateur: "
if [[ $EUID -eq 0 ]]; then
    echo -e "${GREEN}root ‚úÖ${NC}"
else
    echo -e "${YELLOW}$(whoami) (sudo requis)${NC}"
fi

# V√©rification espace disque
echo -n "Espace disque: "
available=$(df / | awk 'NR==2{print $4}')
if [ $available -gt 5000000 ]; then
    echo -e "${GREEN}$(df -h / | awk 'NR==2{print $4}') libre ‚úÖ${NC}"
else
    echo -e "${RED}$(df -h / | awk 'NR==2{print $4}') libre ‚ùå${NC}"
fi

# V√©rification RAM
echo -n "RAM: "
ram_total=$(free -h | awk 'NR==2{print $2}')
ram_available=$(free -h | awk 'NR==2{print $7}')
echo -e "${BLUE}$ram_total total, $ram_available disponible${NC}"

echo ""
echo -e "${YELLOW}üîß V√©rification Outils${NC}"
echo "---------------------"

# V√©rification commandes essentielles
check_command "curl"
check_command "wget"
check_command "git"
check_command "unzip"

# V√©rification gestionnaire de paquets
if check_command "apt-get"; then
    echo -e "${GREEN}‚úÖ Gestionnaire de paquets: apt${NC}"
elif check_command "yum"; then
    echo -e "${GREEN}‚úÖ Gestionnaire de paquets: yum${NC}"
else
    echo -e "${RED}‚ùå Gestionnaire de paquets non support√©${NC}"
fi

echo ""
echo -e "${YELLOW}üì¶ V√©rification Node.js${NC}"
echo "----------------------"

if check_command "node"; then
    node_version=$(node --version)
    echo -e "${BLUE}Version Node.js: $node_version${NC}"
    
    # V√©rification version Node.js
    major_version=$(echo $node_version | cut -d'.' -f1 | sed 's/v//')
    if [ $major_version -ge 16 ]; then
        echo -e "${GREEN}‚úÖ Version Node.js compatible${NC}"
    else
        echo -e "${RED}‚ùå Version Node.js trop ancienne (requis: ‚â•16)${NC}"
    fi
else
    echo -e "${RED}‚ùå Node.js non install√©${NC}"
fi

if check_command "npm"; then
    npm_version=$(npm --version)
    echo -e "${BLUE}Version npm: $npm_version${NC}"
fi

echo ""
echo -e "${YELLOW}üóÑÔ∏è V√©rification Base de Donn√©es${NC}"
echo "-----------------------------"

if check_command "psql"; then
    pg_version=$(psql --version 2>/dev/null | head -1)
    echo -e "${BLUE}$pg_version${NC}"
    
    # Test connexion PostgreSQL
    if sudo -u postgres psql -c "SELECT 1" &>/dev/null; then
        echo -e "${GREEN}‚úÖ PostgreSQL connexion OK${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL connexion √©chou√©e${NC}"
    fi
else
    echo -e "${RED}‚ùå PostgreSQL non install√©${NC}"
fi

echo ""
echo -e "${YELLOW}üåê V√©rification R√©seau${NC}"
echo "--------------------"

# Test connectivit√© internet
echo -n "Connectivit√© Internet: "
if curl -s --max-time 5 google.com > /dev/null; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå Probl√®me de connectivit√©${NC}"
fi

# Test DNS
echo -n "R√©solution DNS: "
if nslookup google.com > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå Probl√®me DNS${NC}"
fi

# Test ports
echo -n "Ports disponibles: "
if netstat -tuln | grep -q ":80\|:443\|:22"; then
    ports=$(netstat -tuln | grep ":80\|:443\|:22" | awk '{print $4}' | cut -d':' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
    echo -e "${YELLOW}Occup√©s: $ports${NC}"
else
    echo -e "${GREEN}‚úÖ 80, 443, 22 libres${NC}"
fi

echo ""
echo -e "${YELLOW}üîí V√©rification Permissions${NC}"
echo "-------------------------"

# V√©rification sudo
echo -n "Sudo disponible: "
if sudo -l &>/dev/null; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå Sudo non configur√©${NC}"
fi

# V√©rification √©criture
echo -n "√âcriture /opt: "
if [ -w /opt ]; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå Pas de permission d'√©criture${NC}"
fi

echo ""
echo -e "${YELLOW}üìÅ V√©rification Fichiers${NC}"
echo "-----------------------"

# V√©rification scripts
if [ -f "deploy-auto.sh" ]; then
    echo -e "${GREEN}‚úÖ deploy-auto.sh pr√©sent${NC}"
    if [ -x "deploy-auto.sh" ]; then
        echo -e "${GREEN}‚úÖ deploy-auto.sh ex√©cutable${NC}"
    else
        echo -e "${RED}‚ùå deploy-auto.sh non ex√©cutable${NC}"
        echo -e "${YELLOW}Solution: chmod +x deploy-auto.sh${NC}"
    fi
else
    echo -e "${RED}‚ùå deploy-auto.sh manquant${NC}"
fi

# V√©rification configuration
if [ -f ".env.production" ]; then
    echo -e "${GREEN}‚úÖ .env.production pr√©sent${NC}"
else
    echo -e "${RED}‚ùå .env.production manquant${NC}"
fi

echo ""
echo -e "${YELLOW}üö® Probl√®mes Identifi√©s et Solutions${NC}"
echo "===================================="

problems_found=false

# Solutions pour Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}PROBL√àME: Node.js manquant${NC}"
    echo -e "${BLUE}SOLUTION:${NC}"
    echo "curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash -"
    echo "sudo apt-get install -y nodejs"
    problems_found=true
fi

# Solutions pour PostgreSQL
if ! command -v psql &> /dev/null; then
    echo -e "${RED}PROBL√àME: PostgreSQL manquant${NC}"
    echo -e "${BLUE}SOLUTION:${NC}"
    echo "sudo apt-get update"
    echo "sudo apt-get install -y postgresql postgresql-contrib"
    problems_found=true
fi

# Solutions pour permissions
if [[ $EUID -ne 0 ]] && ! sudo -l &>/dev/null; then
    echo -e "${RED}PROBL√àME: Permissions insuffisantes${NC}"
    echo -e "${BLUE}SOLUTION:${NC}"
    echo "Ex√©cutez avec sudo: sudo ./deploy-auto.sh"
    problems_found=true
fi

# Solutions pour connectivit√©
if ! curl -s --max-time 5 google.com > /dev/null; then
    echo -e "${RED}PROBL√àME: Pas de connectivit√© Internet${NC}"
    echo -e "${BLUE}SOLUTION:${NC}"
    echo "V√©rifiez votre connexion r√©seau et proxy"
    problems_found=true
fi

if ! $problems_found; then
    echo -e "${GREEN}‚úÖ Aucun probl√®me majeur d√©tect√©${NC}"
    echo ""
    echo -e "${BLUE}üöÄ Pr√™t pour le d√©ploiement !${NC}"
    echo "Commande: sudo ./deploy-auto.sh"
else
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è R√©solvez les probl√®mes ci-dessus avant de continuer${NC}"
fi

echo ""
echo -e "${BLUE}üìû Support Additionnel${NC}"
echo "-------------------"
echo "Si les probl√®mes persistent:"
echo "1. V√©rifiez les logs: journalctl -xe"
echo "2. Testez chaque √©tape manuellement"
echo "3. Utilisez le mode verbose: bash -x deploy-auto.sh"

echo ""
echo -e "${GREEN}Diagnostic termin√©.${NC}"