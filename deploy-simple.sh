#!/bin/bash
# Script de d√©ploiement simplifi√© et robuste
# R√©sout les probl√®mes courants de d√©ploiement

set -e

# Variables
DOMAIN="databackupledger.com"
APP_DIR="/opt/databackupledger"
DB_NAME="rec_ledger"
DB_USER="rec_ledger_user"
DB_PASSWORD="rec_ledger_2025_secure"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ D√âPLOIEMENT SIMPLIFI√â databackupledger.com${NC}"
echo "================================================="

# Fonction de logging avec gestion d'erreurs
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

error_exit() {
    echo -e "${RED}[ERREUR] $1${NC}"
    echo -e "${YELLOW}üîç Ex√©cutez ./diagnose-deployment.sh pour diagnostiquer${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[ATTENTION] $1${NC}"
}

# V√©rification pr√©requis de base
log "üîç V√©rification pr√©requis..."

# V√©rification root/sudo
if [[ $EUID -ne 0 ]]; then
    error_exit "Ce script doit √™tre ex√©cut√© avec sudo"
fi

# V√©rification OS support√©
if ! command -v apt-get &> /dev/null; then
    error_exit "OS non support√©. N√©cessite Ubuntu/Debian avec apt-get"
fi

# V√©rification connectivit√©
if ! curl -s --max-time 10 google.com > /dev/null; then
    error_exit "Pas de connectivit√© Internet"
fi

log "‚úÖ Pr√©requis valid√©s"

# Mise √† jour syst√®me avec gestion d'erreurs
log "üì¶ Mise √† jour syst√®me..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y || error_exit "√âchec mise √† jour des paquets"

# Installation d√©pendances essentielles
log "üîß Installation d√©pendances essentielles..."
apt-get install -y curl wget git nginx postgresql postgresql-contrib ufw || error_exit "√âchec installation d√©pendances"

# Installation Node.js avec v√©rification
log "üì¶ Installation Node.js 20..."
if ! command -v node &> /dev/null; then
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - || error_exit "√âchec t√©l√©chargement Node.js"
    apt-get install -y nodejs || error_exit "√âchec installation Node.js"
fi

# V√©rification version Node.js
NODE_VERSION=$(node --version | cut -d'.' -f1 | sed 's/v//')
if [ $NODE_VERSION -lt 16 ]; then
    error_exit "Version Node.js trop ancienne: $(node --version). Requis: ‚â•16"
fi

log "‚úÖ Node.js $(node --version) install√©"

# Installation PM2
log "üîß Installation PM2..."
npm install -g pm2 || error_exit "√âchec installation PM2"

# Configuration PostgreSQL
log "üóÑÔ∏è Configuration PostgreSQL..."
systemctl start postgresql || error_exit "√âchec d√©marrage PostgreSQL"
systemctl enable postgresql

# Cr√©ation base de donn√©es avec gestion d'erreurs
log "üìä Configuration base de donn√©es..."
sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;" 2>/dev/null || true
sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;" 2>/dev/null || true
sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;" || error_exit "√âchec cr√©ation base de donn√©es"
sudo -u postgres psql -c "CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD';" || error_exit "√âchec cr√©ation utilisateur DB"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;" || error_exit "√âchec attribution permissions DB"
sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;" || error_exit "√âchec modification utilisateur DB"

# Test connexion base de donn√©es
if ! sudo -u postgres psql -d $DB_NAME -c "SELECT 1;" > /dev/null; then
    error_exit "Impossible de se connecter √† la base de donn√©es"
fi

log "‚úÖ Base de donn√©es configur√©e"

# Pr√©paration r√©pertoire application
log "üìÇ Pr√©paration application..."
mkdir -p $APP_DIR
cp -r . $APP_DIR/ 2>/dev/null || true
cd $APP_DIR

# Installation d√©pendances Node.js
log "üì¶ Installation d√©pendances Node.js..."
if [ -f "package.json" ]; then
    npm install || error_exit "√âchec installation d√©pendances npm"
else
    error_exit "package.json manquant"
fi

# Configuration environnement
log "‚öôÔ∏è Configuration environnement..."
if [ ! -f ".env.production" ]; then
    warning ".env.production manquant, cr√©ation automatique..."
    cat > .env.production << EOF
NODE_ENV=production
PORT=5000
DOMAIN=$DOMAIN
DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME
SESSION_SECRET=$(openssl rand -base64 32)
SMTP_HOST=smtp.hostinger.com
SMTP_PORT=465
SMTP_SECURE=true
EMAIL_USER=cs@os-report.com
EMAIL_PASS=Alpha9779@
EMAIL_FROM_NAME=Support Ledger
FROM_EMAIL=cs@os-report.com
LOG_LEVEL=info
ENABLE_MONITORING=true
EOF
fi

cp .env.production .env

# Build application
log "üèóÔ∏è Build application..."
if [ -f "package.json" ] && grep -q "build" package.json; then
    npm run build || error_exit "√âchec build application"
else
    warning "Script build non trouv√©, ignor√©..."
fi

# Migration base de donn√©es
log "üîÑ Migration base de donn√©es..."
if [ -f "package.json" ] && grep -q "db:push" package.json; then
    npm run db:push || warning "√âchec migration - continuons..."
else
    warning "Script migration non trouv√©, ignor√©..."
fi

# Configuration Nginx simplifi√©e
log "üåê Configuration Nginx..."
cat > /etc/nginx/sites-available/$DOMAIN << 'EOF'
server {
    listen 80;
    server_name databackupledger.com www.databackupledger.com;
    
    location / {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}
EOF

# Activation site
ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# Test configuration Nginx
if ! nginx -t; then
    error_exit "Configuration Nginx invalide"
fi

systemctl restart nginx || error_exit "√âchec red√©marrage Nginx"
systemctl enable nginx

log "‚úÖ Nginx configur√©"

# D√©marrage application
log "üöÄ D√©marrage application..."

# Arr√™t processus existants
pm2 stop all 2>/dev/null || true
pm2 delete all 2>/dev/null || true

# D√©marrage avec PM2
if [ -f "dist/index.js" ]; then
    pm2 start dist/index.js --name "$DOMAIN" || error_exit "√âchec d√©marrage avec dist/"
elif [ -f "server/index.js" ]; then
    pm2 start server/index.js --name "$DOMAIN" || error_exit "√âchec d√©marrage avec server/"
elif [ -f "index.js" ]; then
    pm2 start index.js --name "$DOMAIN" || error_exit "√âchec d√©marrage avec index.js"
else
    error_exit "Fichier principal de l'application non trouv√©"
fi

pm2 save
pm2 startup

# Configuration firewall basique
log "üî• Configuration firewall..."
ufw --force enable
ufw allow ssh
ufw allow 'Nginx Full'

# Tests finaux
log "üß™ Tests finaux..."
sleep 5

# Test application locale
if curl -f -s http://localhost:5000 > /dev/null; then
    log "‚úÖ Application accessible localement"
else
    error_exit "Application non accessible localement"
fi

# Test Nginx
if curl -f -s http://localhost > /dev/null; then
    log "‚úÖ Nginx proxy fonctionne"
else
    warning "‚ö†Ô∏è Nginx proxy peut avoir des probl√®mes"
fi

# Informations finales
echo ""
echo -e "${GREEN}üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!${NC}"
echo "======================================="
echo ""
echo -e "${BLUE}üìä Statut des services:${NC}"
echo "- PostgreSQL: $(systemctl is-active postgresql)"
echo "- Nginx: $(systemctl is-active nginx)"
echo "- Application: $(pm2 list | grep $DOMAIN | awk '{print $18}' || echo 'unknown')"
echo ""
echo -e "${BLUE}üåê URLs d'acc√®s:${NC}"
echo "- Local: http://localhost"
echo "- Public: http://$(curl -s ifconfig.me || echo 'IP_PUBLIC')"
echo "- Domaine: http://$DOMAIN (si DNS configur√©)"
echo ""
echo -e "${BLUE}üë§ Comptes de test:${NC}"
echo "- Client: client@demo.com / demo123"
echo "- Admin: admin@ledger.com / admin123"
echo "- Vendeur: vendeur@demo.com / vendeur123"
echo ""
echo -e "${BLUE}üîß Commandes utiles:${NC}"
echo "- Status: pm2 status"
echo "- Logs: pm2 logs $DOMAIN"
echo "- Restart: pm2 restart $DOMAIN"
echo ""
echo -e "${YELLOW}üìã Prochaines √©tapes recommand√©es:${NC}"
echo "1. Configurez DNS pour $DOMAIN"
echo "2. Installez SSL: certbot --nginx -d $DOMAIN"
echo "3. Testez toutes les fonctionnalit√©s"
echo ""
echo -e "${GREEN}D√©ploiement simple termin√© !${NC}"