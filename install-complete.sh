#!/bin/bash
# Script d'installation automatique compl√®te - Ledger R√©cup√©ration
# Auteur: Installation automatis√©e pour rec-ledger.com

set -e

echo "üöÄ INSTALLATION AUTOMATIQUE LEDGER R√âCUP√âRATION"
echo "================================================="

# Variables de configuration
DOMAIN="rec-ledger.com"
DB_NAME="rec_ledger"
DB_USER="rec_ledger_user"
DB_PASSWORD="rec_ledger_2025_secure"
SESSION_SECRET=$(openssl rand -base64 32)

echo "üìã Configuration:"
echo "- Domaine: $DOMAIN"
echo "- Base de donn√©es: $DB_NAME"
echo "- Utilisateur DB: $DB_USER"
echo ""

# V√©rification des pr√©requis
echo "üîç V√©rification des pr√©requis..."
command -v node >/dev/null 2>&1 || { echo "‚ùå Node.js requis"; exit 1; }
command -v npm >/dev/null 2>&1 || { echo "‚ùå npm requis"; exit 1; }
command -v sudo >/dev/null 2>&1 || { echo "‚ùå sudo requis"; exit 1; }

echo "‚úÖ Pr√©requis valid√©s"
echo ""

# Installation PostgreSQL
echo "üóÑÔ∏è Installation PostgreSQL..."
sudo apt update
sudo apt install -y postgresql postgresql-contrib

# Configuration PostgreSQL
echo "‚öôÔ∏è Configuration PostgreSQL..."
sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;" 2>/dev/null || echo "Base de donn√©es d√©j√† existante"
sudo -u postgres psql -c "CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD';" 2>/dev/null || echo "Utilisateur d√©j√† existant"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;"

# D√©marrage PostgreSQL
echo "üöÄ D√©marrage PostgreSQL..."
if command -v systemctl >/dev/null 2>&1; then
    sudo systemctl start postgresql
    sudo systemctl enable postgresql
else
    sudo -u postgres /usr/lib/postgresql/*/bin/pg_ctl -D /var/lib/postgresql/*/main -l /var/lib/postgresql/*/main/pg.log start
fi

# Installation d√©pendances Node.js
echo "üì¶ Installation des d√©pendances..."
npm install

# Configuration environnement
echo "‚öôÔ∏è Configuration environnement..."
cat > .env << EOF
# Configuration Ledger R√©cup√©ration
NODE_ENV=production
PORT=5000
DOMAIN=$DOMAIN

# Base de donn√©es PostgreSQL
DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME

# S√©curit√©
SESSION_SECRET=$SESSION_SECRET

# Email syst√®me (Hostinger)
SMTP_HOST=smtp.hostinger.com
SMTP_PORT=465
SMTP_SECURE=true
EMAIL_USER=cs@os-report.com
EMAIL_PASS=Alpha9779@
EMAIL_FROM_NAME=Support Ledger
FROM_EMAIL=cs@os-report.com

# Configuration production
LOG_LEVEL=info
ENABLE_MONITORING=true
EOF

# Migrations base de donn√©es
echo "üîÑ Application des migrations..."
npm run db:push

# Build application
echo "üèóÔ∏è Build de l'application..."
npm run build

# Installation PM2
echo "üîß Installation PM2..."
npm install -g pm2

# Cr√©ation des dossiers n√©cessaires
mkdir -p logs
mkdir -p uploads/kyc

# D√©marrage avec PM2
echo "üöÄ D√©marrage avec PM2..."
pm2 start dist/index.js --name "rec-ledger"
pm2 save
pm2 startup

echo ""
echo "‚úÖ INSTALLATION TERMIN√âE AVEC SUCC√àS!"
echo "====================================="
echo ""
echo "üéØ Acc√®s √† l'application:"
echo "- URL: http://localhost:$PORT"
echo "- Client: client@demo.com / demo123"
echo "- Admin: admin@ledger.com / admin123"
echo "- Vendeur: vendeur@demo.com / vendeur123"
echo ""
echo "üîß Commandes utiles:"
echo "- Statut: pm2 status"
echo "- Logs: pm2 logs rec-ledger"
echo "- Red√©marrage: pm2 restart rec-ledger"
echo "- Arr√™t: pm2 stop rec-ledger"
echo ""
echo "üìä V√©rification finale..."
sleep 3
if curl -f http://localhost:$PORT/api/auth/me >/dev/null 2>&1; then
    echo "‚úÖ Application d√©marr√©e avec succ√®s!"
else
    echo "‚ö†Ô∏è V√©rifiez le statut avec: pm2 logs rec-ledger"
fi